# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: akatsuki777
# "service" is the name of this project. This will also be added to your AWS resource names.
service: user-service

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  versionFunctions: false
  stage: "dev"
  region: eu-central-1
  httpApi:
    cors: true
  # SNS Topic
  environment:
    SNS_TOPIC: ${self:custom.snsTopic} #! FOR LOCAL TESTING. REMOVE THIS FOR LIVE
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - !Ref CustomerTopic

custom:
  stage: "dev"
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  snsTopic: ${env:SNS_TOPIC} #! FOR LOCAL TESTING. REMOVE THIS FOR LIVE

#! When deploying to prod change dist --> app
functions:
  signup:
    handler: dist/handler.SignUp
    events:
      - httpApi:
          path: /signup
          method: post

  login:
    handler: dist/handler.Login
    events:
      - httpApi:
          path: /login
          method: post

  verify:
    handler: dist/handler.Verify
    events:
      - httpApi:
          path: /verify
          method: post

  get-verification-code:
    handler: dist/handler.GetVerificationCode
    events:
      - httpApi:
          path: /verify
          method: get

  create-profile:
    handler: dist/handler.CreateProfile
    events:
      - httpApi:
          path: /user
          method: post

  edit-profile:
    handler: dist/handler.EditProfile
    events:
      - httpApi:
          path: /user
          method: put

  get-profile:
    handler: dist/handler.GetProfile
    events:
      - httpApi:
          path: /user
          method: get

  create-cart:
    handler: dist/handler.CreateCart
    timeout: 20
    events:
      - httpApi:
          path: /cart
          method: post

  edit-cart:
    handler: dist/handler.EditCart
    timeout: 20
    events:
      - httpApi:
          path: /cart/{id}
          method: put

  get-cart:
    handler: dist/handler.GetCart
    timeout: 20
    events:
      - httpApi:
          path: /cart
          method: get

  delete-cart:
    handler: dist/handler.DeleteCart
    timeout: 20
    events:
      - httpApi:
          path: /cart/{id}
          method: delete

  collect-payment:
    handler: dist/handler.CollectPayment
    timeout: 20
    events:
      - httpApi:
          path: /collect-payment
          method: post

  place-order:
    handler: dist/handler.PlaceOrder
    timeout: 20
    events:
      - httpApi:
          path: /order
          method: post

  joinSellerProgram:
    handler: dist/handler.JoinSellerProgram
    events:
      - httpApi:
          path: /join
          method: post

  getPaymentMethod:
    handler: dist/handler.GetPaymentMethod
    events:
      - httpApi:
          path: /payment-methods
          method: get

  editPaymentMethod:
    handler: dist/handler.EditPaymentMethod
    events:
      - httpApi:
          path: /payment-methods/{id}
          method: put

plugins:
  - serverless-offline
  - serverless-plugin-optimize

package:
  individually: true

resources:
  Resources:
    CustomerTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "customer sns topic description"
        TopicName: CustomerTopic

  Outputs:
    CustomerTopicInfo:
      Description: customer-topic
      Value: !Ref CustomerTopic
      Export:
        Name: customer-topic
